- name: Establecer hostname, web_server  
  hostname:
    name: "wpserver"
##########################################################################
#INSTALLING PHP
##########################################################################
- name: Add the ondrej PHP PPA(repositorio con muchas herramientas PHP).
  apt_repository: repo='ppa:ondrej/php'
- name: Update the apt cache
  apt: update_cache=yes cache_valid_time=3600 
- name: Install PHP
  apt: name={{item}} state=installed
  with_items:
    - php
    - php-fpm
    - php-mysql
    - php-xml
#Como instalando PHP se instala Apache2 por defecto, procedemos a desisntalarlo
- name: Remove Apache2
  apt: name=apache2 state=removed
############################################################################
#INSTALLING MySQL
############################################################################
- name: Install MySQL
  apt: name={{item}} state=present
  with_items:
    - mysql-server

- name: Install python-MySQL
  apt: name=python-mysqldb state=installed update_cache=yes 
#Ansible instala mysql con un la contrase침a de toot vacia y deja y deja algunos test 
#de basededatos disponibles para usuarios anonimos, por ello, realizaremos lo siguiente:
#     1.Cambiar la contrase침a por defectod de root.
#     2.Remover los usuarios an칩nimos.
#     3.Remover el test de basededatos y sus accesos.
- name: Remove anonymous useres
  mysql_user: name="" state=absent

- name: Remove test database
  mysql_db: name=test state=absent

- name: Update root password
  mysql_user: name=root host={{item}} password={{mysql_new_root_pass}}
  with_items:
    - "{{ ansible_hostname}}"
    - 127.0.0.1
    - ::1
    - localhost

- name : Output new root password
  debug: msg="New root password is {{mysql_new_root_pass}}"

- name: Copy the my.cnf configuration file into my environment
  template:
    src: templates/mysql/my.cnf
    dest: "/root/.my.cnf"

#este archivo contiene el usuario y la contrase침a para el usuario root de MySQL, este el requerido para permitir a Ansible hacer camios sin intervencion del usuario.

############################################################################
#INSTALLING NGINX
############################################################################

- name: Install nginx
  apt: name=nginx state=installed
- name: Start nginx
  service: name=nginx state=started
- name: Copy the default configuration file into my environment
  template: src=templates/nginx/default dest=/etc/nginx/sites-available/default
  notify: restart nginx

#- name: Create project folder
#  file:
#    dest: /var/www/{{ project_folder }} 
#    state: directory
#- name: Copy the index.html prueba into my environment
#  template: src=templates/nginx/index.html dest=/var/www/tfguah.es/index.html
#  notify: restart nginx

############################################################################
#DOWNLOADING AND INSTALLING WORDPRESS
############################################################################

- name: Get WordPress checksum
  uri: url=https://wordpress.org/latest.zip.sha1 return_content=true
  register: wp_checksum

- name: Download WordPress
  get_url:
    url: https://wordpress.org/latest.zip
    dest: /tmp/wordpress.zip
    checksum: "sha1:{{ wp_checksum.content }}" 

- name: Install unzip
  apt: name={{item}} state=installed
  with_items:
    - unzip

- name: Create project folder
  file:
    dest: /var/www/{{ project_folder }} 
    state: directory

- name: Unzip WordPress
  unarchive:
    src: /tmp/wordpress.zip 
    dest: /tmp
    copy: no
    creates: /tmp/wordpress/wordpress/wp-settings.php

- name: Copy the info.php prueba into my environment
  template: src=templates/wordpress/info.php dest=/var/www/tfguah.es/info.php
  notify: restart nginx

- name: Create a new database with name 'wordpress'
  mysql_db:
    name: "{{ bbdd_filename }}"
    state: present

- name: Create WordPress MySQL user
  mysql_user:
    name: "{{ mysql_wordpress_user }}"
    host: localhost
    password: "{{ mysql_wordpress_pass }}"
    priv: wordpress.*:ALL

- name: Copy WordPress files
  command: cp -a /tmp/wordpress/. /var/www/{{ project_folder }} creates=/var/{{ project_folder }}/wp-settings.php

- name: Create wp-config
  template:
    src: templates/wordpress/wp-config.php 
    dest: /var/www/{{ project_folder }}/wp-config.php

- name: Copy wordpress.sql to the virtual machine
  template:
    src: templates/mysql/{{ bbdd_filename }}.sql
    dest: "/tmp/{{ bbdd_filename }}.sql"


- name: Import wordpress.sql similar to mysql -u <username> -p <password> < hostname.sql
  mysql_db:
    state: import
    name: '{{ bbdd_filename }}'
    target: /tmp/{{ bbdd_filename }}.sql

- name: Upload wordpress images
  copy:
    src: "files/images/{{ images_wp }}.zip"
    dest: "/tmp"

- name: create uploads folder
  file:
    dest: /var/www/{{ project_folder }}/wp-content/uploads/ 
    state: directory
    mode: 0777

- name: Create unzip images folder
  file:
    dest: "/tmp/{{ images_wp }}" 
    state: directory

- name: Copy WordPress images.zip
  command: cp /tmp/{{ images_wp }}.zip /var/www/{{ project_folder }}/wp-content/uploads/

- name: unzip wordpress images
  unarchive:
    src: "/var/www/{{ project_folder }}/wp-content/uploads/{{ images_wp }}.zip" 
    dest: "/var/www/{{ project_folder }}/wp-content/uploads/"
    copy: no

- name: Copy WordPress images.zip
  command: rm /var/www/{{ project_folder }}/wp-content/uploads/{{ images_wp }}.zip

##########################################################################
#CONFIGURING NETWORKING
##########################################################################
- name: Add static route
  command: ip route add {{ EXT }} via {{ PROXY_DMZ }} dev eth1














